name: Release PDF

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Latest Version from VERSION file or Tag
        id: get_version
        run: |
          if [[ -f VERSION ]]; then
            LATEST_VERSION=$(cat VERSION)
          else
            LATEST_VERSION=$(git tag --sort=-v:refname | head -n 1)
            if [[ -z "$LATEST_VERSION" ]]; then
              LATEST_VERSION="1.0"
            fi
          fi
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_ENV

      - name: Determine New Version
        id: versioning
        run: |
          LATEST_VERSION=${{ env.latest_version }}
          COMMIT_MSG="$(git log -1 --pretty=%B)"
          MAJOR_UPDATE=false
          if [[ "$COMMIT_MSG" == *"major"* ]]; then
            MAJOR_UPDATE=true
          fi
          MAJOR=$(echo $LATEST_VERSION | cut -d. -f1)
          MINOR=$(echo $LATEST_VERSION | cut -d. -f2)
          if $MAJOR_UPDATE; then
            NEW_VERSION=$((MAJOR+1)).0
          else
            NEW_VERSION=$MAJOR.$((MINOR+1))
          fi
          echo "$NEW_VERSION" > VERSION
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "release_date=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Commit and Push Updated VERSION file
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add VERSION
          git commit -m "Update VERSION file to ${{ env.new_version }}"
          git push

      - name: Create Tag
        run: |
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.new_version }}
          name: "Release ${{ env.new_version }} - ${{ env.release_date }}"
          files: main.pdf
